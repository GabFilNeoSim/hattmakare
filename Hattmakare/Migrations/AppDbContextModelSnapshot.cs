// <auto-generated />
using System;
using Hattmakare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hattmakare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hattmakare.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "Blåbärsstigen 99",
                            City = "Örebro",
                            Country = "Sverige",
                            DeliveryAddress = "Solrosvägen 88",
                            PostalCode = "11322"
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "Krickelinsväg 101",
                            City = "Stockholm",
                            Country = "Sverige",
                            DeliveryAddress = "Snöflingegatan 202",
                            PostalCode = "55667"
                        },
                        new
                        {
                            Id = 3,
                            BillingAddress = "Månstrålevägen 45",
                            City = "Umeå",
                            Country = "Sverige",
                            DeliveryAddress = "Regnbågsgatan 12",
                            PostalCode = "22433"
                        },
                        new
                        {
                            Id = 4,
                            BillingAddress = "Silverbäcksvägen 77",
                            City = "Paris",
                            Country = "Frankrike",
                            DeliveryAddress = "Älvdalsvägen 34",
                            PostalCode = "77889"
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("HeadMeasurements")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "olof.svensson@epost.se",
                            FirstName = "Olof",
                            HeadMeasurements = 0.0,
                            IsDeleted = false,
                            LastName = "Svensson",
                            PhoneNumber = "0723338282"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "jan.jansson@epost.se",
                            FirstName = "Jan",
                            HeadMeasurements = 0.0,
                            IsDeleted = false,
                            LastName = "Jansson",
                            PhoneNumber = "0723557781"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "julia.smith@epost.se",
                            FirstName = "Julia",
                            HeadMeasurements = 0.0,
                            IsDeleted = false,
                            LastName = "Smith",
                            PhoneNumber = "0723219981"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Email = "kajsa.fisk@epost.se",
                            FirstName = "Kajsa",
                            HeadMeasurements = 0.0,
                            IsDeleted = false,
                            LastName = "Fisk",
                            PhoneNumber = "0733447785"
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Hat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<int?>("HatTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HatTypeId");

                    b.ToTable("Hats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "En vit, rund mössa med svart skärm och en kokard framtill, traditionellt buren vid svenska studentexamina",
                            Depth = 5.0,
                            HatTypeId = 1,
                            ImageUrl = "/assets/hats/Student.jpg",
                            IsDeleted = false,
                            Length = 23.0,
                            Name = "Studenthatt",
                            Price = 1500m,
                            Quantity = 2,
                            Size = 10,
                            Width = 20.0
                        },
                        new
                        {
                            Id = 2,
                            Comment = "En formell vit hatt med svart skärm och guldbroderad dekoration, som symboliserar sjöfartsbefäl.",
                            Depth = 4.0,
                            HatTypeId = 1,
                            ImageUrl = "/assets/hats/Kaptenshatt.jpg",
                            IsDeleted = false,
                            Length = 22.0,
                            Name = "Kaptenshatt",
                            Price = 1000m,
                            Quantity = 3,
                            Size = 9,
                            Width = 18.0
                        },
                        new
                        {
                            Id = 3,
                            Comment = "En röd, cylinderformad hatt utan brätten, ofta prydd med en tofs, traditionellt buren i delar av Mellanöstern och Nordafrika.",
                            Depth = 9.0,
                            HatTypeId = 1,
                            ImageUrl = "/assets/hats/Fez.jpg",
                            IsDeleted = false,
                            Length = 16.0,
                            Name = "Fez",
                            Price = 800m,
                            Quantity = 2,
                            Size = 8,
                            Width = 16.0
                        },
                        new
                        {
                            Id = 4,
                            Comment = "En bredbrättad hatt av filt eller halm, designad för att skydda mot sol och regn på den amerikanska prärien.",
                            Depth = 8.0,
                            HatTypeId = 1,
                            ImageUrl = "/assets/hats/Cowboyhatt.jpg",
                            IsDeleted = false,
                            Length = 35.0,
                            Name = "Cowboyhatt",
                            Price = 2000m,
                            Quantity = 1,
                            Size = 12,
                            Width = 30.0
                        },
                        new
                        {
                            Id = 5,
                            Comment = "En lätt och luftig hatt flätad av halm, perfekt för att ge skugga och svalka under soliga sommardagar.",
                            Depth = 7.0,
                            HatTypeId = 1,
                            ImageUrl = "/assets/hats/Halmhatt.jpg",
                            IsDeleted = false,
                            Length = 32.0,
                            Name = "Halmhatt",
                            Price = 600m,
                            Quantity = 1,
                            Size = 11,
                            Width = 30.0
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.HatMaterial", b =>
                {
                    b.Property<int>("HatId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("HatId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("HatsMaterial");

                    b.HasData(
                        new
                        {
                            HatId = 1,
                            MaterialId = 8,
                            Quantity = 0.5
                        },
                        new
                        {
                            HatId = 1,
                            MaterialId = 12,
                            Quantity = 0.29999999999999999
                        },
                        new
                        {
                            HatId = 1,
                            MaterialId = 22,
                            Quantity = 5.0
                        },
                        new
                        {
                            HatId = 1,
                            MaterialId = 21,
                            Quantity = 1.0
                        },
                        new
                        {
                            HatId = 2,
                            MaterialId = 8,
                            Quantity = 0.5
                        },
                        new
                        {
                            HatId = 2,
                            MaterialId = 12,
                            Quantity = 0.29999999999999999
                        },
                        new
                        {
                            HatId = 2,
                            MaterialId = 24,
                            Quantity = 1.0
                        },
                        new
                        {
                            HatId = 3,
                            MaterialId = 10,
                            Quantity = 0.69999999999999996
                        },
                        new
                        {
                            HatId = 3,
                            MaterialId = 24,
                            Quantity = 0.5
                        },
                        new
                        {
                            HatId = 4,
                            MaterialId = 15,
                            Quantity = 1.0
                        },
                        new
                        {
                            HatId = 4,
                            MaterialId = 5,
                            Quantity = 0.5
                        },
                        new
                        {
                            HatId = 4,
                            MaterialId = 19,
                            Quantity = 1.0
                        },
                        new
                        {
                            HatId = 5,
                            MaterialId = 4,
                            Quantity = 0.69999999999999996
                        },
                        new
                        {
                            HatId = 5,
                            MaterialId = 21,
                            Quantity = 1.0
                        },
                        new
                        {
                            HatId = 5,
                            MaterialId = 20,
                            Quantity = 2.0
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.HatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HatTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Standardhatt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Standardhatt med tillägg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Specialhatt"
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDecoration")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDecoration = false,
                            Name = "Ullfilt",
                            Price = 124.50m,
                            Supplier = "Nordic Felt AB",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 2,
                            IsDecoration = false,
                            Name = "Kaninfilt",
                            Price = 499.90m,
                            Supplier = "Hatter’s Choice Ltd",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 3,
                            IsDecoration = false,
                            Name = "Toquillastrå",
                            Price = 419.75m,
                            Supplier = "Ecuador Weaves Co.",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 4,
                            IsDecoration = false,
                            Name = "Rishalm",
                            Price = 109.20m,
                            Supplier = "StrawCraft Asia",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 5,
                            IsDecoration = false,
                            Name = "Palmlöv",
                            Price = 94.60m,
                            Supplier = "Tropic Naturals",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 6,
                            IsDecoration = false,
                            Name = "Majsblad",
                            Price = 134.95m,
                            Supplier = "EcoFiber Mexico",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 7,
                            IsDecoration = false,
                            Name = "Hampfibrer",
                            Price = 159.50m,
                            Supplier = "GreenTextiles GmbH",
                            Unit = "kg"
                        },
                        new
                        {
                            Id = 8,
                            IsDecoration = false,
                            Name = "Bomull",
                            Price = 59.90m,
                            Supplier = "CottonLine Textiles",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 9,
                            IsDecoration = false,
                            Name = "Linne",
                            Price = 84.75m,
                            Supplier = "NordTextil AB",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 10,
                            IsDecoration = false,
                            Name = "Ull",
                            Price = 109.00m,
                            Supplier = "NordTextil AB",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 11,
                            IsDecoration = false,
                            Name = "Silke",
                            Price = 399.90m,
                            Supplier = "Silken Touch Co.",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 12,
                            IsDecoration = false,
                            Name = "Satin",
                            Price = 129.50m,
                            Supplier = "Fabric Elegance",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 13,
                            IsDecoration = false,
                            Name = "Tweed",
                            Price = 179.90m,
                            Supplier = "Highland Textiles",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 14,
                            IsDecoration = false,
                            Name = "Polyester",
                            Price = 49.95m,
                            Supplier = "GlobalPoly Ltd",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 15,
                            IsDecoration = false,
                            Name = "Läder",
                            Price = 849.00m,
                            Supplier = "Scandi Leatherworks",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 16,
                            IsDecoration = false,
                            Name = "Lackerat papper",
                            Price = 0.75m,
                            Supplier = "CraftMaterials.se",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 17,
                            IsDecoration = false,
                            Name = "Fuskpäls",
                            Price = 144.60m,
                            Supplier = "FauxFur Fabrics",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 18,
                            IsDecoration = true,
                            Name = "Strutsfjäder",
                            Price = 35.00m,
                            Supplier = "Bendigo Farm Inc",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 19,
                            IsDecoration = true,
                            Name = "Påfågelfjäder",
                            Price = 64.90m,
                            Supplier = "FeatherWorks Ltd",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 20,
                            IsDecoration = true,
                            Name = "Hönsfjäder",
                            Price = 0.90m,
                            Supplier = "FeatherWorks Ltd",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 21,
                            IsDecoration = true,
                            Name = "Tygblommor",
                            Price = 29.95m,
                            Supplier = "DecoFlora AB",
                            Unit = "st"
                        },
                        new
                        {
                            Id = 22,
                            IsDecoration = true,
                            Name = "Pärlor",
                            Price = 11.50m,
                            Supplier = "Pearl Paradise",
                            Unit = "g"
                        },
                        new
                        {
                            Id = 23,
                            IsDecoration = true,
                            Name = "Spets",
                            Price = 39.90m,
                            Supplier = "Lace & Grace",
                            Unit = "m"
                        },
                        new
                        {
                            Id = 24,
                            IsDecoration = true,
                            Name = "Lurextråd",
                            Price = 59.00m,
                            Supplier = "ShinyThreads Co.",
                            Unit = "m"
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            EndDate = new DateTime(2025, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 1,
                            Price = 3125m,
                            Priority = false,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            EndDate = new DateTime(2025, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 2,
                            Price = 6450m,
                            Priority = true,
                            StartDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            EndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 2,
                            Price = 600m,
                            Priority = true,
                            StartDate = new DateTime(2025, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 3,
                            EndDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 3,
                            Price = 600m,
                            Priority = false,
                            StartDate = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 4,
                            EndDate = new DateTime(2025, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 1,
                            Price = 600m,
                            Priority = true,
                            StartDate = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 4,
                            EndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusId = 2,
                            Price = 600m,
                            Priority = false,
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.OrderHat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HatId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HatId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HatId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            HatId = 2,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 3,
                            HatId = 5,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 4,
                            HatId = 4,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 5,
                            HatId = 2,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 6,
                            HatId = 2,
                            OrderId = 3
                        },
                        new
                        {
                            Id = 7,
                            HatId = 3,
                            OrderId = 4
                        },
                        new
                        {
                            Id = 8,
                            HatId = 5,
                            OrderId = 4
                        },
                        new
                        {
                            Id = 9,
                            HatId = 2,
                            OrderId = 5
                        },
                        new
                        {
                            Id = 10,
                            HatId = 4,
                            OrderId = 5
                        },
                        new
                        {
                            Id = 11,
                            HatId = 1,
                            OrderId = 6
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ej påbörjad"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Påbörjad"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Klar"
                        });
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Customer", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Hat", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.HatType", "HatType")
                        .WithMany("Hats")
                        .HasForeignKey("HatTypeId");

                    b.Navigation("HatType");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.HatMaterial", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.Hat", "Hat")
                        .WithMany("HatMaterials")
                        .HasForeignKey("HatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hattmakare.Data.Entities.Material", "Material")
                        .WithMany("HatMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hat");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Order", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Hattmakare.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.OrderHat", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.Hat", "Hat")
                        .WithMany("OrderHats")
                        .HasForeignKey("HatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hattmakare.Data.Entities.Order", "Order")
                        .WithMany("OrderHats")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hattmakare.Data.Entities.User", "User")
                        .WithMany("OrderHats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Hat");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hattmakare.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hattmakare.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Address", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Hat", b =>
                {
                    b.Navigation("HatMaterials");

                    b.Navigation("OrderHats");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.HatType", b =>
                {
                    b.Navigation("Hats");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Material", b =>
                {
                    b.Navigation("HatMaterials");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderHats");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hattmakare.Data.Entities.User", b =>
                {
                    b.Navigation("OrderHats");
                });
#pragma warning restore 612, 618
        }
    }
}
